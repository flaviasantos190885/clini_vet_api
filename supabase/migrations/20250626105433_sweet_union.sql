/*
  # Criação do esquema da clínica veterinária

  1. Novas Tabelas
    - `usuarios` - Usuários do sistema (veterinários, recepcionistas, gestores)
    - `clientes` - Tutores dos animais
    - `animais` - Dados dos animais
    - `prontuarios` - Histórico médico dos animais
    - `prescricoes` - Prescrições médicas
    - `vacinas` - Registro de vacinas
    - `anexos_prontuario` - Anexos dos prontuários
    - `agendamentos` - Agendamentos de consultas
    - `produtos` - Produtos e medicamentos
    - `lotes_produto` - Controle de lotes
    - `movimentacao_estoque` - Movimentação de estoque
    - `faturas` - Faturas de cobrança
    - `itens_fatura` - Itens das faturas
    - `pagamentos` - Pagamentos recebidos
    - `atendimento_fatura` - Mapeamento atendimento-fatura

  2. Segurança
    - RLS habilitado para todas as tabelas
    - Políticas básicas de acesso público para leitura
*/

-- Criação da tabela de Usuarios
CREATE TABLE IF NOT EXISTS public.usuarios (
    id_usuario BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    senha_hash VARCHAR(255) NOT NULL,
    perfil VARCHAR(50) NOT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    data_cadastro TIMESTAMPTZ DEFAULT NOW(),
    data_atualizacao TIMESTAMPTZ DEFAULT NOW()
);

-- Criação da tabela de Clientes
CREATE TABLE IF NOT EXISTS public.clientes (
    id_cliente BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    email VARCHAR(100),
    endereco VARCHAR(255),
    data_cadastro TIMESTAMPTZ DEFAULT NOW(),
    data_atualizacao TIMESTAMPTZ DEFAULT NOW(),
    ativo BOOLEAN DEFAULT TRUE
);

-- Criação da tabela de Animais
CREATE TABLE IF NOT EXISTS public.animais (
    id_animal BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cliente BIGINT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    especie VARCHAR(50) NOT NULL,
    raca VARCHAR(50),
    data_nascimento DATE,
    sexo CHAR(1),
    peso DECIMAL(6,2),
    observacoes TEXT,
    data_cadastro TIMESTAMPTZ DEFAULT NOW(),
    data_atualizacao TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (id_cliente) REFERENCES public.clientes(id_cliente)
);

-- Criação da tabela de Prontuarios
CREATE TABLE IF NOT EXISTS public.prontuarios (
    id_prontuario BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_animal BIGINT NOT NULL,
    data_atendimento TIMESTAMPTZ DEFAULT NOW(),
    id_veterinario BIGINT NOT NULL,
    tipo_atendimento VARCHAR(50),
    anamnese TEXT,
    diagnostico TEXT,
    procedimentos_realizados TEXT,
    observacoes TEXT,
    FOREIGN KEY (id_animal) REFERENCES public.animais(id_animal),
    FOREIGN KEY (id_veterinario) REFERENCES public.usuarios(id_usuario)
);

-- Tabela de Prescrições
CREATE TABLE IF NOT EXISTS public.prescricoes (
    id_prescricao BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_prontuario BIGINT NOT NULL,
    medicamento VARCHAR(100) NOT NULL,
    dosagem VARCHAR(50),
    frequencia VARCHAR(50),
    duracao VARCHAR(50),
    observacoes TEXT,
    data_prescricao TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (id_prontuario) REFERENCES public.prontuarios(id_prontuario)
);

-- Tabela de Vacinas
CREATE TABLE IF NOT EXISTS public.vacinas (
    id_vacina BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_prontuario BIGINT NOT NULL,
    nome_vacina VARCHAR(100) NOT NULL,
    data_aplicacao DATE NOT NULL,
    data_proxima_dose DATE,
    lote VARCHAR(50),
    FOREIGN KEY (id_prontuario) REFERENCES public.prontuarios(id_prontuario)
);

-- Tabela de Anexos do Prontuário
CREATE TABLE IF NOT EXISTS public.anexos_prontuario (
    id_anexo BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_prontuario BIGINT NOT NULL,
    nome_arquivo VARCHAR(255) NOT NULL,
    caminho_arquivo VARCHAR(255) NOT NULL,
    tipo_arquivo VARCHAR(50),
    data_upload TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (id_prontuario) REFERENCES public.prontuarios(id_prontuario)
);

-- Tabela de Agendamentos
CREATE TABLE IF NOT EXISTS public.agendamentos (
    id_agendamento BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_animal BIGINT NOT NULL,
    id_cliente BIGINT NOT NULL,
    id_veterinario BIGINT NOT NULL,
    data_hora_inicio TIMESTAMPTZ NOT NULL,
    data_hora_fim TIMESTAMPTZ NOT NULL,
    tipo_agendamento VARCHAR(50) NOT NULL,
    status_agendamento VARCHAR(50) NOT NULL DEFAULT 'Agendado',
    observacoes TEXT,
    data_cadastro TIMESTAMPTZ DEFAULT NOW(),
    data_atualizacao TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (id_animal) REFERENCES public.animais(id_animal),
    FOREIGN KEY (id_cliente) REFERENCES public.clientes(id_cliente),
    FOREIGN KEY (id_veterinario) REFERENCES public.usuarios(id_usuario)
);

-- Tabela de Produtos
CREATE TABLE IF NOT EXISTS public.produtos (
    id_produto BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    preco_venda DECIMAL(10,2) NOT NULL,
    unidade_medida VARCHAR(20),
    estoque_atual INTEGER NOT NULL DEFAULT 0,
    estoque_minimo INTEGER NOT NULL DEFAULT 0,
    data_cadastro TIMESTAMPTZ DEFAULT NOW(),
    data_atualizacao TIMESTAMPTZ DEFAULT NOW(),
    ativo BOOLEAN DEFAULT TRUE
);

-- Tabela de Lotes de Produto
CREATE TABLE IF NOT EXISTS public.lotes_produto (
    id_lote BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_produto BIGINT NOT NULL,
    numero_lote VARCHAR(50) NOT NULL,
    data_validade DATE NOT NULL,
    quantidade_inicial INTEGER NOT NULL,
    quantidade_disponivel INTEGER NOT NULL,
    data_entrada TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (id_produto) REFERENCES public.produtos(id_produto)
);

-- Tabela de Movimentação de Estoque
CREATE TABLE IF NOT EXISTS public.movimentacao_estoque (
    id_movimentacao BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_produto BIGINT NOT NULL,
    id_lote BIGINT,
    tipo_movimentacao VARCHAR(20) NOT NULL,
    quantidade INTEGER NOT NULL,
    data_movimentacao TIMESTAMPTZ DEFAULT NOW(),
    id_usuario_responsavel BIGINT,
    observacoes TEXT,
    FOREIGN KEY (id_produto) REFERENCES public.produtos(id_produto),
    FOREIGN KEY (id_lote) REFERENCES public.lotes_produto(id_lote),
    FOREIGN KEY (id_usuario_responsavel) REFERENCES public.usuarios(id_usuario)
);

-- Tabela de Faturas
CREATE TABLE IF NOT EXISTS public.faturas (
    id_fatura BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_atendimento BIGINT,
    id_cliente BIGINT NOT NULL,
    data_emissao TIMESTAMPTZ DEFAULT NOW(),
    data_vencimento DATE,
    valor_total DECIMAL(10,2) NOT NULL,
    status_fatura VARCHAR(50) NOT NULL DEFAULT 'Pendente',
    observacoes TEXT,
    FOREIGN KEY (id_cliente) REFERENCES public.clientes(id_cliente)
);

-- Tabela de Itens da Fatura
CREATE TABLE IF NOT EXISTS public.itens_fatura (
    id_item_fatura BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_fatura BIGINT NOT NULL,
    id_produto BIGINT,
    descricao_servico VARCHAR(255),
    quantidade INTEGER NOT NULL DEFAULT 1,
    valor_unitario DECIMAL(10,2) NOT NULL,
    valor_total_item DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_fatura) REFERENCES public.faturas(id_fatura),
    FOREIGN KEY (id_produto) REFERENCES public.produtos(id_produto)
);

-- Tabela de Pagamentos
CREATE TABLE IF NOT EXISTS public.pagamentos (
    id_pagamento BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_fatura BIGINT NOT NULL,
    data_pagamento TIMESTAMPTZ DEFAULT NOW(),
    valor_pago DECIMAL(10,2) NOT NULL,
    forma_pagamento VARCHAR(50) NOT NULL,
    observacoes TEXT,
    FOREIGN KEY (id_fatura) REFERENCES public.faturas(id_fatura)
);

-- Tabela de Atendimento-Fatura
CREATE TABLE IF NOT EXISTS public.atendimento_fatura (
    id_atendimento_fatura BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_prontuario BIGINT NOT NULL,
    id_fatura BIGINT NOT NULL,
    FOREIGN KEY (id_prontuario) REFERENCES public.prontuarios(id_prontuario),
    FOREIGN KEY (id_fatura) REFERENCES public.faturas(id_fatura),
    UNIQUE (id_prontuario, id_fatura)
);

-- Habilitando RLS para todas as tabelas
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clientes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.animais ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prontuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prescricoes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vacinas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.anexos_prontuario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agendamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.produtos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lotes_produto ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.movimentacao_estoque ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.faturas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.itens_fatura ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pagamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.atendimento_fatura ENABLE ROW LEVEL SECURITY;

-- Políticas de acesso público para todas as operações (conforme solicitado)
CREATE POLICY "Permitir todas as operações públicas" ON public.usuarios FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.clientes FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.animais FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.prontuarios FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.prescricoes FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.vacinas FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.anexos_prontuario FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.agendamentos FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.produtos FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.lotes_produto FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.movimentacao_estoque FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.faturas FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.itens_fatura FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.pagamentos FOR ALL USING (true);
CREATE POLICY "Permitir todas as operações públicas" ON public.atendimento_fatura FOR ALL USING (true);